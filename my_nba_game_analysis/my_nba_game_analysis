import os
os.chdir("/home/jovyan/")
print(os.getcwd())

import csv
import pandas as pd
import numpy as np


def csv_read(file_name):
    col_names = "PERIOD|REMAINING_SEC|RELEVANT_TEAM|AWAY_TEAM|HOME_TEAM|AWAY_SCORE|HOME_SCORE|DESCRIPTION"
    col_names = col_names.split("|")
    with open(file_name) as File:  
        csv_data = csv.reader(File, delimiter='|')
        df = pd.DataFrame(None, columns=col_names)
        for row in csv_data:
            df = df.append(pd.DataFrame(np.reshape(row, (1,8)), columns=col_names), ignore_index=True)
        return df

    
def analyse_nba_game(data):       
    dict={"home_team":{}, "away_team":{}}
    dict["home_team"]["name"] = ",".join(np.unique(data["HOME_TEAM"]))
    dict["away_team"]["name"] = ",".join(np.unique(data["AWAY_TEAM"]))
    
    dict["home_team"]["players_data"] = analyse_data(data, dict["home_team"]["name"], "HOME")
    dict["away_team"]["players_data"] = analyse_data(data, dict["away_team"]["name"], "AWAY")
   
    return dict


def return_player_name(desc):
    desc = desc.replace(". ", ".")
    for i in desc.split(" "):
        if ("." in i):
            return i
            break


def return_event_type(desc):
    res = ""
    
    if ("misses" in desc and "block" in desc):
        res = res + "--" + "block"
    if ("misses" in desc):
        res = res + "--" + "misses"
    if ("Offensive rebound" in desc):
        res = res + "--" + "offensive_rebound"
    if ("Defensive rebound" in desc):
        res = res + "--" + "defensive_rebound"
    if ("Turnover" in desc):
        res = res + "--" + "turnover"
    if ("makes free" in desc):
        res = res + "--" + "makes_free--throw"
    if ("hook shot" in desc):
        res = res + "--" + "hook_shot--throw"
    if ("dunk at rim" in desc):
        res = res + "--" + "dunk_at_rim--throw"
    if ("jump shot" in desc):
        res = res + "--" + "jump_shot--throw"
    if ("3-pt" in desc):
        res = res + "--" + "3-pt--throw"
    if ("foul" in desc):
        res = res + "--" + "foul"
    if ("enters the game" in desc):
        res = res + "--" + "enters_the_game"
    if ("layup" in desc):
        res = res + "--" + "layup--throw"
    if ("dunk" in desc):
        res = res + "--" + "dunk--throw"
    if ("assist" in desc):
        res = res + "--" + "assist"
    if ("steal" in desc):
        res = res + "--" + "steal"

    return res


def analyse_data(data, team_name, home_away):
    dict = {}
    df = data.where(data["RELEVANT_TEAM"] == team_name)
    df = df.dropna()
    df.index = range(0, len(df))
    
    df_sc = pd.to_numeric(df[home_away + "_SCORE"])
    df["Goal_count"] = [df_sc[e] - df_sc[e-1] if e > 0 else 0 for e in df_sc.index] 
    
    df["Player_name"] = [return_player_name(e) for e in df["DESCRIPTION"]]
    df["Event_type"] = [return_event_type(e) for e in df["DESCRIPTION"]]
    df["Event_type"] = df["Event_type"] + "--goal_" + df["Goal_count"].apply(str)    
    df_et = df["Event_type"]
    
    i=0
    for player_name in df["Player_name"].unique():
        df_pl = df.where(df["Player_name"] == player_name)
        df_pl = df_pl.dropna()
        i+=1
        dict[i] = return_stat(player_name, df_pl["Event_type"], df_pl["Goal_count"])
    
    return dict


def return_stat(player_name, df_et, df_gl):
    dict = {}
    dict["player_name"] = player_name
    
    dict["FG"] = np.sum([1 if "throw" in e and "goal_0" not in e and "makes_free" not in e else 0 for e in df_et])
    dict["FGA"] = np.sum([1 if "throw" in e else 0 for e in df_et])
    dict["FG%"] = dict["FG"] / dict["FGA"]
    
    dict["3P"] = np.sum([1 if "3-pt" in e and "goal_0" not in e else 0 for e in df_et])
    dict["3PA"] = np.sum([1 if "3-pt" in e else 0 for e in df_et])
    dict["3P%"] = dict["3P"] / dict["3PA"]
    
    dict["FT"] = np.sum([1 if "makes_free" in e and "goal_0" not in e else 0 for e in df_et])
    dict["FTA"] = np.sum([1 if "makes_free" in e and "" else 0 for e in df_et])
    dict["FT%"] = dict["FT"] / dict["FTA"]
    
    dict["ORB"] = np.sum([1 if "offensive_rebound" in e else 0 for e in df_et])
    dict["DRB"] = np.sum([1 if "defensive_rebound" in e else 0 for e in df_et])
    dict["TRB"] = dict["ORB"] + dict["DRB"]
    
    dict["AST"] = np.sum([1 if "assist" in e else 0 for e in df_et])
    dict["STL"] = np.sum([1 if "steal" in e else 0 for e in df_et])
    dict["BLK"] = np.sum([1 if "block" in e else 0 for e in df_et])
    
    dict["TOV"] = np.sum([1 if "turnover" in e else 0 for e in df_et])
    dict["PF"] = np.sum([1 if "foul" in e else 0 for e in df_et])
    dict["PTS"] = np.sum(df_gl)
    
    return dict

# FG – количество бросков, попавших в корзину, за исключением штрафных бросков (Field Goals);</li>
# FGA – количество всех выполненных бросков (Field Goals Attempts);</li>
# FG% – процентное соотношение между результативными бросками и общим количеством выполненных бросков (Field Goals Percentage);</li>
# 3P – количество результативных бросков из трёхочковой зоны (3-Point Field Goals);</li>
# 3PA – количество всех выполненных бросков из трёхочковой зоны (3-Point Field Goals Attempts);</li>
# 3P% – процентное соотношение между результативными трёхочковыми бросками и общим количеством выполненных трёхочковых бросков (3-Point Field Goals Percentage);</li>
# FT – количество результативных штрафных бросков (Free Throws);</li>
# FTA – общее количество штрафных бросков (Free Throws Attempts);</li>
# FT% – процентное соотношение между результативными штрафными бросками и общим количеством штрафных бросков (Free Throws Percentage);</li>
# ORB – количество выигранных подборов под корзиной соперника (Offensive Rebounds);</li>
# DRB – количество выигранных подборов под своей корзиной (Defensive Rebounds);</li>
# TRB – полное количество выигранных подборов (Total Rebounds);</li>
# AST – количество передач, после которых был выполнен результативный бросок (Assists);</li>
# STL – количество удачных перехватов мяча (Steals);</li>
# BLK – количество удачно выполненных блоков (Blocks);</li>
# TOV – количество потерянных мячей (Turnovers);</li>
# PF – количество персональных замечаний (Personal Fouls);</li>
# PTS – количество набранных очков (Points);</li>


def my_nba_game_analysis(file_name):
    data = csv_read(file_name)
    data = analyse_nba_game(data)
    print(data) 
    
    
my_nba_game_analysis('nba_game_blazers_lakers_20181018.csv')

    
# Аттрибуты csv.reader
# delimiter 	Устанавливает символ, с помощью которого разделяются элементы в файле. По умолчанию используется запятая.
# doublequote 	Если True, то символ quotechar удваивается, если False, то к символу qutechar добавляется ecsapechar в качестве префикса.
# escapechar 	Строка из одного символа, которая используется для экранирования символа-разделителя.
# lineterminator 	Определяет разделитель для строк, по умолчанию используется «\r\n»
# quotechar 	Определяет символ, который используется для окружения символа-разделителя. По умолчанию используются двойные кавычки, то есть quotechar = ‘ » ‘.
# quoting 	Определяет символ, который используется для экранирования символа разделителя (если не используются кавычки).
# skipinitialspace 	Если установить значение этого параметра в True, то все пробелы после символа-разделителя будут игнорироваться.
# strict 	Если установить в True, то при неправильном вводе CSV будет возбуждаться исключение Error.
